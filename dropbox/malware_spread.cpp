#include <iostream>
#include <queue>
#include <unordered_set>
#include <vector>
#include <cassert>
using namespace std;

int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    // You have a graph of outgoing edges to other nodes
    // WE have a list of initial infected nodes
    // At each point ,we want to minimize, so remove the current node and create a set from everything else
    // Do a BFS traversal from the current node into all other nodes 
    // Take the current node, visit all of its outgoing edges by putting on a queue
    // Create a new et called infected (a.k.a "visited")
    // If number of nodes less than previous minimum stop right there
     unordered_set<int> initialAsSet (initial.begin(), initial.end());
    
    
    auto traverseAndGetNumInfected =[&graph](unordered_set<int>& nodes, const int currentMin) {
        unordered_set<int> visited;
        queue<int> remaining;
        for (auto initial : nodes) 
        	remaining.push(initial);

        while (!remaining.empty()){
        	if (visited.size() > currentMin)
        		return currentMin + 1;

        	int len = remaining.size();
        	for (int i = 0; i < len; i++){
        		auto current = remaining.front();
        		remaining.pop();
        		visited.insert(current);
        		for (int j = 0; j < graph[current].size(); j++){
        			if ((graph[current][j] || graph [j][current])
        				&& visited.find(j) == visited.end())
        				remaining.push(j);
        		}
        	}
        }
        return (int) visited.size();
    };

     int minInfected = INT_MAX;
     int minNode = INT_MAX;
     for (auto infectedNode : initial) {
         initialAsSet.erase(infectedNode);
         auto count = traverseAndGetNumInfected(initialAsSet, minInfected);
         if (count < minInfected) {
         	minNode = infectedNode;
         	minInfected = count;
         } else if (count == minInfected 
         			&& infectedNode < minNode ) {
         			minNode = infectedNode;
         }
         initialAsSet.insert(infectedNode);
     }
     return minNode;
}
int main(){
	vector<vector<int>> graph =  {{1,1,0},{1,1,0},{0,0,1}};
	vector<int> initial = {0,1};
	assert(minMalwareSpread(graph, initial) == 0);
	graph =  {{1,0,0},{0,1,0},{0,0,1}};
	initial = {0,2};
	assert(minMalwareSpread(graph, initial) == 0);
	graph =  {{1,1,1},{1,1,1},{1,1,1}};
	initial = {1,2};
	assert(minMalwareSpread(graph, initial) == 1);
}